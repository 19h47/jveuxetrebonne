/**
 * Tease post
 *
 * @uses .Tease-post
 */
.Tease-post {
	$this: &;

	@extend %position-relative;

	animation: {
		name: fade-in-down;
		duration: .3s;
		timing-function: ease-in;
	}
	opacity: 1;
	transform: translateY( 0 );

	@mixin meta-style() {
		@extend .d-inline-block, %font-title, %margin-0, %font-semibold;
		@include letter-spacing( 20 );

		font-size: 15px;
	}


	a {
		@extend .d-block, %overflow-hidden, %position-relative;
		@include size( 100% );

		@include media-breakpoint-up( md ) {

			&:hover {
				.thumbnail { transform: scale( 1.1 ); }
				#{ $this }-header { @include autoAlpha( 1 ); }
				#{ $this }-header__meta { @include autoAlpha( 1 ); }
				.title {
					@include autoAlpha( 1 );
					transform: translate3d( 0, 0, 0 );
				}
			}
		}
	}


	/**
	 * Inner
	 *
	 * @uses .Tease-post-inner
	 */
	&-inner { @include media-breakpoint-up( md ) { @include absolute( top 0 right 0 bottom 0 left 0 ); } }


	/**
	 * Header
	 *
	 * @uses .Tease-post-header
	 */
	&-header {
		@extend %text-align-center, %Transition-ease;

		background-color: the_color( white );
		z-index: 20;

		@include media-breakpoint-up( md ) {
			@include absolute( right 0 bottom 0 left 0 );
			@include autoAlpha( 0 );

			@include padding(
				top #{ $base-line-height / 2 }px
				right $grid-gutter-width / 2
				bottom #{ $base-line-height / 2 }px
				left $grid-gutter-width / 2
			);
		}

		&__meta {
			color: the_color( blue, light-grayish );
			transition: {
				delay: .15s;
				duration: .3s;
				timing-function: ease;
			}

			@include media-breakpoint-up( md ) { @include autoAlpha( 0 ) };
		}
	}


	/**
	 * Thumbnail
	 *
	 * @uses .Tease-post .thumbnail
	 */
	.thumbnail {
		@extend %Transition-ease;
		width: 100%;

		height: #{ $base-line-height * 6 }px;
		object-fit: cover;
		object-position: center;

		@include media-breakpoint-up( sm ) {
			height: #{ $base-line-height * 12 }px;
		}

		@include media-breakpoint-up( md ) {
			@include absolute( top 0 right 0 bottom 0 left 0 );

			height: 100%;
		}
	}


	// .Tease-post .title
	.title {
		@extend %font-bold, %font-title, %margin-0, %Transition-ease, %overflow-hidden;;
		@include letter-spacing( 20 );

		color: the_color( gray, very-dark );
		font-size: 30px;
		white-space: nowrap;
		text-overflow: ellipsis;

		@include media-breakpoint-up( md ) {
			@include autoAlpha( 0 );

			font-size: 18px;
			transform: translate3d( 0, 100%, 0 );
		}
	}


	/**
	 * Date
	 *
	 * @uses .Tease-post .date
	 */
	.date { @include meta-style; }


	/**
	 * Category
	 *
	 * @uses .Tease-post .category
	 */
	.category { @include meta-style; }


	/**
	 * Grids
	 *
	 * @type map
	 */
	$grids: (
		01: (
			class: 'first',
			width: calc( #{ percentage( 850 / $container-width-without-outer-gutter-unitless ) } - #{ $grid-gutter-width } ),
			height: #{ $base-line-height * 23 }px,
			margin: (
				right: $grid-gutter-width
			),
		),
		02: (
			class: 'second',
			width: percentage( 390 / $container-width-without-outer-gutter-unitless ),
			height: #{ $base-line-height * 11 }px,
		),
		03: (
			class: 'third',
			width: percentage( 390 / $container-width-without-outer-gutter-unitless ),
			height: #{ $base-line-height * 11 }px,
			margin: (
				top: #{ $base-line-height }px
			),
		),
		04: (
			class: 'fourth',
			width: calc( #{ percentage( 425 / $container-width-without-outer-gutter-unitless ) } - #{ $grid-gutter-width } ),
			height: #{ $base-line-height * 18 }px,
			margin: (
				right: $grid-gutter-width
			),
		),
		05: (
			class: 'fifth',
			width: percentage( 815 / $container-width-without-outer-gutter-unitless ),
			height: #{ $base-line-height * 18 }px,
		)
	);

	@each $grid, $key in $grids {

		&#{ $this }--#{ unquote( map-get( $key, class ) ) } {

			@include size( 100%, auto );

			@include media-breakpoint-between( xs, sm) {
				@include margin( bottom #{ $base-line-height }px );
			}

			@include media-breakpoint-up( md ) {

				float: left;

				// Sizes
				@include size(
					map-get( $key, width ),
					map-get( $key, height )
				);

				// Margins
				@if map-has-key( $key, margin ) {
					// Stock possible property
					$properties: top right bottom left;

					@each $property in $properties {
						// Stock value
						$value: nth( map-get( map-get( $key, margin ), $property ), 1 );

						@if map-has-key( map-get( $key, margin ), $property ) {

							margin-#{ $property }: $value;
						}
					}
				}
			}
		}
	}
}
